---
title: "Ch2. numpy and pandas"
Date: "2024.08.10(v1)"
Author: "euichan hwang"
format:
  docx:
    toc: false
    number-sections: false
    highlight-style: github
---

# 파이썬 기초
<br>
**프롬프터**
<br>
- 선생님 파이썬 데이터 종류에 대해 간단하고 자세하게 설명해주세요
- 선생님 python 데이터 구조에 대해서 필요한 만큼 자세히 알려주시죠 예제도 보여줬으면 좋겠습니다
- 리스트와 튜플의 차이는 무엇이며 용도에 따라 언제 활용하죠?
- set와 dictionary 차이와 활용법을 소개해주세요
- set의 활용사례에 대해 다른 예시 보여줘
- 선생님 python 데이터 종류별로 데이터 불러오기에 대해서 간단하게 설명해주세요
- 선생님 python 제어문 간단하지만 자세하게 알려주시죠 예문은 포함시켜주세요
- 선생님 python 사칙연산에 대해 간단하게 설명해주세요

<br>

## 데이터 종류
<br>

데이터의 종류에는 크게 정수형, 실수형, 논리형이 있다.

- 정수형(int) : 소수점이 없는 숫자
<br>

```python
a = 10
b = 3
print(a + b)  # 13
print(a - b)  # 7
print(a * b)  # 30
print(a / b)  # 3.333...
print(a ** b)  # 1000
```
<br>

- 실수형(float) : 소수점이 있는 숫자
<br>

실수형 데이터를 int()를 활용하여 정수형으로 변환할때 소수점 이하는 내림한다.
<br>

```python
c = 3.14
d = 0.5
print(c + d)  # 3.64
print(c - d)  # 2.64
print(c * d)  # 1.57
print(c / d)  # 6.28
```
<br>

- 문자열(string) : 문자들의 집합으로, 큰따옴표(" ") 또는 작은따옴표(' ')로 감싸서 표현
<br>

```python
e = "Hello"
f = "World"
print(e + " " + f)  # "Hello World"
print(e * 3)  # "HelloHelloHello"
print(len(e))  # 5
```
<br>

- 논리형(boolean) : True 또는 False로 표현
<br>

```python
g = True
h = False
print(g and h)  # False
print(g or h)  # True
print(not g)  # False
```
<br>

## 데이터 구조
<br>

데이터의 구조는 리스트 구조, 튜플 구조, 세트 구조, 딕셔너리 구조로 나눌 수 있으며 그 외에 스택 구조, 큐 구조가 있다. 그러나 numpy 배열이나 pandas 데이터프레임을 주로 활용한다. 인덱싱을 시행할 때 0부터 시작한다는 것을 기억하자.

리스트는 편집에 용이하며 튜플은 수정이 불가능하다. 따라서 튜를은 데이터 무결성을 보장해야하는 DB를 관리할때 사용하는 것이 좋다.
<br>

- 리스트(List) : 리스트는 다양한 데이터 타입을 포함할 수 있으며, 인덱스를 통해 개별 요소에 접근할 수 있습니다.
<br>

```python
# 리스트 생성
my_list = [1, 2, 3, 'a', 'b', 'c']

# 리스트 요소 접근
print(my_list[0])  # 1

# 리스트 요소 변경
my_list[0] = 10
print(my_list)  # [10, 2, 3, 'a', 'b', 'c']

# 리스트 요소 추가
my_list.append(4)
print(my_list)  # [10, 2, 3, 'a', 'b', 'c', 4]

# 리스트 요소 삭제
del my_list[1]
print(my_list)  # [10, 3, 'a', 'b', 'c', 4]
```
<br>

- 튜플(Tuple) : 튜플은 리스트와 비슷하지만, 요소의 값을 변경할 수 없습니다.
<br>

```python
# 튜플 생성
my_tuple = (1, 2, 3, 'a', 'b', 'c')

# 튜플 요소 접근
print(my_tuple[0])  # 1

# 튜플 요소 변경 불가
# my_tuple[0] = 10  # 오류 발생

# 튜플 요소 추가 불가
# my_tuple.append(4)  # 오류 발생
```
<br>

- 세트(Set) : 세트는 집합을 표현하는 자료형으로, 중복을 허용하지 않습니다.

셋은 중복을 허용하지 않으므로 리스트에 있던 중복을 제거하는데 용이하다. 딕셔너리는 키를 통해 값을 빠르게 조회하는데 편리하다

텍스트마이닝에서 중복되지 않은 단어의 갯수를 파악하는데 set이 유용할 수 있다.
<br>

```python
# 세트 생성
my_set = {1, 2, 3, 'a', 'b', 'c'}

# 세트 요소 추가
my_set.add(4)
print(my_set)  # {1, 2, 3, 4, 'a', 'b', 'c'}

# 세트 요소 삭제
my_set.remove('a')
print(my_set)  # {1, 2, 3, 4, 'b', 'c'}

# 세트는 중복된 요소를 허용하지 않음
my_set.dda(4)
print(my_set)  # {1, 2, 3, 4, 'b', 'c'}
```
<br>

```python
text = "apple banana apple orange banana grape"
words = text.split()  # ['apple', 'banana', 'apple', 'orange', 'banana', 'grape']

# 셋을 사용하여 고유한 단어만 남기기
unique_words = set(words)
print(len(unique_words))  # 출력: 4
```
<br>

- 딕셔너리(Dictionary) : 딕셔너리는 키-값 쌍으로 구성되어 있으며, 키를 통해 값을 얻을 수 있습니다.
<br>

```python
# 딕셔너리 생성
my_dict = {'name': 'Alice', 'age': 25, 'city': 'New York'}

# 딕셔너리 요소 접근
print(my_dict['name'])  # Alice

# 딕셔너리 요소 추가 및 변경
my_dict['age'] = 30
print(my_dict)  # {'name': 'Alice', 'age': 30, 'city': 'New York'}

# 딕셔너리 요소 삭제
del my_dict['city']
print(my_dict)  # {'name': 'Alice', 'age': 30}
```
<br>

딕셔너리 키값에 매핑되는 값은 여러 개일 수 있다.

<br>

```python
# 딕셔너리 예시: 하나의 키에 여러 값을 딕셔너리로 저장
student_info = {
    "Alice": {"age": 20, "grades": [85, 92, 88]},
    "Bob": {"age": 22, "grades": [78, 81, 85]},
    "Charlie": {"age": 21, "grades": [90, 87, 85]}
}

print(student_info["Alice"])  # 출력: {'age': 20, 'grades': [85, 92, 88]}
print(student_info["Alice"]["grades"])  # 출력: [85, 92, 88]
```
<br>

## 데이터 불러오기

### csv 파일 불러오기

- 콤마 구분자
<br>

```python
import numpy as np
from google.colab import files

# CSV 파일 업로드
uploaded = files.upload() # 파일 업로드 하는 함수츨 호출해서 uploaded라는 곳에 저장

# 파일 이름을 확인하고 'economic_data.csv'로 변경하세요
filename = list(uploaded.keys())[0] # 업로드된 파일의 이름들을 담고 잇는 키 목록을 호출하여 가장 첫번재 파일의 이름을 가져온다
print("Uploaded file name:", filename)

# CSV 파일에서 데이터 불러오기 (콤마 구분자)
data = np.genfromtxt(filename, delimiter=',', skip_header=1)

# 데이터 확인
print("Data shape:", data.shape)
print("First 5 rows of data:\n", data[:5])

```
<br>

- 탭 구분자
<br>

```python
# CSV 파일에서 데이터 불러오기 (탭 구분자)
data_tab = np.genfromtxt(filename, delimiter='\t', skip_header=1)
```
<br>

- 세미콜론 구분자
<br>

```python
# CSV 파일에서 데이터 불러오기 (세미콜론 구분자)
data_semicolon = np.genfromtxt(filename, delimiter=';', skip_header=1)
```
<br>

### excel 파일 불러오기
<br>

```python
import pandas as pd
import numpy as np
from google.colab import files

# Excel 파일 업로드
uploaded = files.upload() # uploaded 변수는 업로드된 파일들을 나타내는 딕셔너리를 반환

# 파일 이름을 확인하고 'economic_data.xlsx'로 변경하세요
filename = list(uploaded.keys())[0]
 # uploaded.keys는 딕셔너리 키를 가져오는 것이고
 # list()는 이 키를 리스트 형태로 변환하는 것
 # [0]는 리스트에서 첫 번째 요소를 선택하는 것 의미

print("Uploaded file name:", filename)

# Excel 파일에서 데이터 불러오기
df = pd.read_excel(filename)

# Pandas DataFrame을 NumPy 배열로 변환
data = df.to_numpy()

# 데이터 확인
print("Data shape:", data.shape)
print("First 5 rows of data:\n", data[:5])
```
<br>

### 텍스트 파일 불러오기
<br>

```python
import numpy as np
from google.colab import files

# 텍스트 파일 업로드
uploaded = files.upload()

# 파일 이름을 확인하고 'economic_data.txt'로 변경하세요
filename = list(uploaded.keys())[0]
print("Uploaded file name:", filename)

# 텍스트 파일에서 데이터 불러오기 (예: 공백으로 구분된 데이터)
data = np.loadtxt(filename, delimiter=' ')

# 데이터 확인
print("Data shape:", data.shape)
print("First 5 rows of data:\n", data[:5])
```
<br>

### github 파일 불러오기
<br>

```python
import pandas as pd
import numpy as np

# CSV 파일의 GitHub Raw URL
url = 'https://raw.githubusercontent.com/dmlcks123/gptforecondata/main/Economic_Data_Sample.csv'

# Pandas를 사용하여 CSV 파일 불러오기
df = pd.read_csv(url)

# 데이터 확인
print("Data shape:", df.shape)
print("First 5 rows of data:\n", df.head())

# Pandas DataFrame을 NumPy 배열로 변환
data = df.to_numpy()

# NumPy 배열 확인
print("NumPy array shape:", data.shape)
print("First 5 rows of NumPy array:\n", data[:5])
```
<br>

### json 파일 불러오기
<br>

```python
import json
import numpy as np
from google.colab import files

# JSON 파일 업로드
uploaded = files.upload()

# 파일 이름을 확인하고 'economic_data.json'로 변경하세요
filename = list(uploaded.keys())[0]
print("Uploaded file name:", filename)

# JSON 파일에서 데이터 불러오기
# 'rb' 모드로 파일을 읽습니다.
with open(filename, 'rb') as f:
    # 파일 내용을 UTF-8로 디코딩하고, 첫 번째 유효한 JSON 객체만 로드합니다.
    json_data = json.loads(f.read().decode('utf-8').strip())  # .strip()을 사용하여 공백 제거

# 예를 들어 JSON 데이터가 리스트의 리스트 형태라면, NumPy 배열로 변환
data = np.array(json_data)

# 데이터 확인
print("Data shape:", data.shape)
print("First 5 rows of data:\n", data[:5])
```
<br>

## 제어문

파이썬에는 조건문을 통한 제어와 반복문을 통한 제어를 할 수 있다. 반복문과 제어문을 활용하여 함수를 생성할 수 있으므로 기초를 익히고 가는 것이 중요하다.
<br>

### 조건문(if, elif, else)
<br>

```python
age = 19

if age < 18:
    print("미성년자입니다.")
elif age == 18:
    print("막 성인이 되었습니다.")
else:
    print("성인입니다.")
```
<br>

- age 변수에 18을 할당합니다.
- if 문으로 age가 18보다 작은지 검사합니다. 참이면 "미성년자입니다."를 출력합니다.
- elif 문으로 age가 18과 같은지 검사합니다. 참이면 "막 성인이 되었습니다."를 출력합니다.
- 위의 조건이 모두 거짓이면 else 문이 실행되어 "성인입니다."를 출력합니다.
<br>


### 반복문(for, while, break, continue)
<br>


```python
# for 문 예제
fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    print(fruit)
```
<br>

- fruits 리스트에 세 가지 과일을 저장합니다.
- for 문으로 리스트의 각 요소를 순회하면서 fruit 변수에 하나씩 할당하고 출력합니다.
<br>

```python
# while 문 예제
count = 0

while count < 5:
    print(count)
    count += 1
```
<br>

- count 변수를 0으로 초기화합니다.
- while 문으로 count가 5보다 작은 동안 반복합니다.
- 반복할 때마다 count 값을 출력하고, count를 1씩 증가시킵니다.
<br>

```python
# break 문 예제
for i in range(10):
    if i == 5:
        break
    print(i)
```
<br>

- for 문으로 0부터 9까지 순회합니다.
- if 문으로 i가 5가 되면 break 문을 실행하여 반복문을 종료합니다.
- i 값이 5가 되기 전까지는 값을 출력합니다.
<br>

```python
# continue 문 예제
for i in range(10):
    if i % 2 == 0:
        continue
    print(i)
```
<br>

- for 문으로 0부터 9까지 순회합니다.
- if 문으로 i가 짝수이면 continue 문을 실행하여 다음 반복으로 넘어갑니다.
- i 값이 홀수일 때만 출력합니다.
<br>


### 중첩제어문
<br>

앞의 제어문을 활용하여 제어문을 중첩시킬 수 있습니다. 이를 통해 고도화된 연산을 진행할 수 있습니다.
<br>

``` python
# 중첩 제어문 예제
for i in range(5):
    if i % 2 == 0:
        print(f"{i}는 짝수입니다.")
    else:
        print(f"{i}는 홀수입니다.")
```
<br>

- or 문으로 0부터 4까지 순회합니다.
- if 문으로 i가 짝수이면 "{i}는 짝수입니다."를 출력합니다.
- 그렇지 않으면 else 문을 실행하여 "{i}는 홀수입니다."를 출력합니다.

<br>

## 사칙연산
<br>

사칙연산 이외에 다음의 연산 기호를 알아두는 것은 도움이 됩니다. 특히 나눗셈 연산과 몫 연산의 차이를 이해하는 것은 중요합니다.

- 덧셈: +
- 뺄셈: -
- 곱셈: *
- 나눗셈: /
- 나머지 연산: %
- 몫 연산: //
- 거듭제곱: **
<br>

```python
# 나눗셈 예제
a = 5
b = 3
result = a / b
print("나눗셈 결과:", result)  # 결과: 1.6666666666666667
```
```python
# 몫 연산 예제
a = 5
b = 3
result = a // b
print("몫 연산 결과:", result)  # 결과: 1
```
<br>

# Numpy
<br>

**프롬프터**

- 선생님 이번엔 경제데이터를 분석하는데 필요한 numpy 라이브러리에 대해서 알아야 할 내용들을 간단하게 말씀주시죠. 예제는 포함하고 자세하게 설명해주세요
- 그렇군요 선생님 경제데이터를 분석하는데 필요한 numpy 라이브러리 지식을 예제와 함께 설명해주세요
- 경제데이터에 초점을 두기보다는 numpy library 기능에 대해서 확인하고 싶습니다. 예제에 대한 설명과 핵심기능만을 소개해주세요. 그러나 데이터 분석에 필요한 기능은 빠뜨리지 않았으면 합니다.
- numpy 배열과 list의 차이는 무엇인가요 어떨때 써- 야 좋은가요
- 다차원의 배열을 생성한다는 것은 무슨 의미가 있을까요?
- ambigous?
- axis조건을 달리하는게 무슨 의미가 있죠?

<br>

## 배열 생성
<br>

리스트는 다양한 데이터 타입을 저장할 수 있는 장점이 있고 Numpy 배열은 동일한 데이터 타입을 저장하며 데이터 크기가 크고 고속 연산에 최적화되어 있다.(numpy가 더 효율적)

배열 생성에 관하여 1차원 벡터는 리스트와 비슷하며 2차원인 배열은 행렬연산, 이미지 데이터에 활용하기 적절하고 3차원 배열은 2차원 배열을 쌓은 것으로 3차원 텐서라고도 하며 RGB 데이터에 활용하기 적절하다. 이외 고차원 배열은 딥러닝 모델에 활용된다.

다음으로 numpy에서 주로 활용되는 메소드를 예제와 함께 알아보자.
<br>


- np.array: 리스트를 numpy 배열로 변환합니다.
<br>

```python
import numpy as np

# 1차원 배열 생성
arr1 = np.array([1, 2, 3, 4, 5])
print("1차원 배열:", arr1)

# 2차원 배열 생성
arr2 = np.array([[1, 2, 3], [4, 5, 6]])
print("2차원 배열:\n", arr2)
```
<br>

- np.zeros((m, n)): m x n 크기의 배열을 생성하고 모든 요소를 0으로 초기화합니다.
<br>

```python
# 0으로 채워진 배열 생성
zeros = np.zeros((2, 3))
print("0으로 채워진 배열:\n", zeros)
```
<br>

- np.ones((m, n)): m x n 크기의 배열을 생성하고 모든 요소를 1로 초기화합니다.
<br>

```python
# 1로 채워진 배열 생성
ones = np.ones((2, 3))
print("1로 채워진 배열:\n", ones)
```
<br>

- np.arange(start, stop, step): start부터 stop까지 step 간격으로 값을 가지는 배열을 생성합니다.
<br>

```python
# 특정 범위의 수로 배열 생성
arange = np.arange(0, 10, 2)
print("0에서 10까지 2간격으로 생성된 배열:", arange)
```
<br>

- np.random.rand(m, n): m x n 크기의 배열을 생성하고, 0과 1 사이의 랜덤 값을 할당합니다.
<br>

```python
# 랜덤 값으로 배열 생성
random = np.random.rand(3, 3)
print("랜덤 값으로 생성된 배열:\n", random)
```
<br>

## 배열 연산
<br>
벡터의 연산을 수행하듯 배열의 연산을 수행할 수 있습니다. 벡터 단위 연산을 진행하므로 빠른 속도로 연산할 수 있는 numpy 배열의 장점입니다. 사칙연산에서 사용하는 연산 기호를 사용하며 예제와 같이 확인합니다.
<br>

- a + b: 두 배열의 요소별 덧셈을 수행합니다.
- a * b: 두 배열의 요소별 곱셈을 수행합니다.
<br>

```python
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

# 배열 간 덧셈
print("배열 덧셈:", a + b)

# 배열 간 곱셈
print("배열 곱셈:", a * b)
```
<br>

- np.sin(a): 배열 a의 각 요소에 대해 사인 함수를 적용합니다.

<br>

```python 
# 배열의 각 요소에 대한 함수 적용
print("배열에 대한 sin 함수 적용:", np.sin(a))
```
<br>

## 배열 슬라이싱 및 인덱싱
<br>

배열 슬라이싱, 인덱싱에 관한 메소드, 예제는 다음과 같습니다. 

- arr[i, j]: 2차원 배열 arr의 (i, j) 위치의 요소를 반환합니다.
- arr[i, :]: i번째 행의 모든 요소를 반환합니다.
- arr[:, j]: j번째 열의 모든 요소를 반환합니다.
- arr[start:stop, start:stop]: 지정된 범위의 서브 배열을 반환합니다.
<br>

```python
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(arr)

# 특정 요소 접근
print("arr[1, 2]:", arr[1, 2])

# 행 접근
print("arr[1, :]:", arr[1, :])

# 열 접근
print("arr[:, 1]:", arr[:, 1])

# 서브 배열 접근
print("arr[0:2, 1:3]:\n", arr[0:2, 1:3]) # 0행에서부터 2행 바로 앞까지, 1열에서부터 3열 바로 앞까지
```
<br>


**참고자료: 왜 인덱싱은 0부터 시작하는가?**

1. 역사적 배경
- C 언어의 영향: 많은 현대 프로그래밍 언어들은 C 언어에서 영감을 받았습니다. C 언어는 0부터 인덱싱을 시작했으며, 이를 통해 많은 후속 언어들이 같은 방식을 따르게 되었습니다. C 언어의 설계자들은 배열의 첫 번째 요소의 주소를 배열의 시작 주소와 동일하게 맞추기 위해 0부터 인덱싱을 시작했습니다.
<br>

2. 메모리 주소 계산의 효율성
- 포인터 연산: 0부터 시작하는 인덱싱은 메모리 주소 계산을 단순화합니다. 예를 들어, 배열 A의 i번째 요소에 접근하려면, 시작 주소에 i를 더하는 방식으로 접근할 수 있습니다. 배열의 첫 번째 요소 A[0]의 주소는 A 자체의 주소와 동일합니다. 이런 방식은 주소 계산을 단순하게 하고, 프로그래머들이 메모리 주소를 계산할 때 편리하게 합니다.
<br>

3. 수학적 편리함
- 수학적 일관성: 컴퓨터 과학에서는 종종 수학적인 개념과 연산을 프로그래밍에 적용하는데, 수학적으로 0을 포함하는 범위는 보다 직관적이고 일관성 있습니다. 예를 들어, 배열의 길이가 n일 때, 유효한 인덱스는 0부터 n-1까지입니다. 이는 범위 [0, n)와 일치하며, 수학적 표기법과 잘 맞아떨어집니다.
<br>

4. 선형 대수학과의 관계
- 행렬과 벡터: 선형 대수학에서는 종종 벡터와 행렬의 인덱스를 0부터 시작합니다. 이는 배열과 리스트를 다루는 데 있어 일관성을 유지합니다. 프로그래밍에서 행렬과 벡터를 다룰 때, 0부터 인덱싱하는 것이 더 자연스럽고 수학적인 연속성을 제공합니다.

<br>

## 통계함수
<br>

numpy 계열에서 유용하게 활용할 수 있는 통계함수는 다음과 같습니다. 메소드를 호출할때는 라이브러리를 앞에 붙여줘야 합니다.
<br>

- np.mean(arr): 배열 arr의 평균을 계산합니다.
- np.median(arr): 배열 arr의 중앙값을 계산합니다.
- np.std(arr): 배열 arr의 표준 편차를 계산합니다.
- np.max(arr): 배열 arr의 최대값을 반환합니다.
- np.min(arr): 배열 arr의 최소값을 반환합니다.
<br>

```python
data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])

# 평균
print("평균:", np.mean(data))

# 중앙값
print("중앙값:", np.median(data))

# 표준 편차
print("표준 편차:", np.std(data))

# 최대값
print("최대값:", np.max(data))

# 최소값
print("최소값:", np.min(data))
```
<br>

## 배열 형태 변경
<br>

배열 형태 변경의 의미는 차원을 추가하거나 축소하는 것이며 쓸모없는 배열을 제거하거나 필요한 배열을 추가하는 것입니다.
<br>

- arr.reshape((m, n)): 배열의 형태를 m x n으로 변경합니다.
<br>

```python
arr = np.array([1, 2, 3, 4, 5, 6])

print(arr)

# 2x3 배열로 변경
reshaped_arr = arr.reshape((2, 3))
print("2x3 배열로 변경:\n", reshaped_arr)
```
<br>

- np.expand_dims(arr, axis): 배열에 새로운 차원을 추가합니다.
- axis = 0: 배열의 첫 번째 차원에 새로운 차원을 추가합니다.
- axis = 1: 배열의 두 번째 차원에 새로운 차원을 추가합니다.
- 즉, 1차원의 벡터가 2차원의 행렬이 될때 axis조건을 통해 행에 차원을 추가할 것인지, 열에 차원을 추가할 것인지 결정한다.
- 결과는 0 -> (1,6) 1 -> (6,1)

<br>

```python
# 차원 추가
expanded_arr = np.expand_dims(arr, axis=1)
print("차원 추가:\n", expanded_arr)
```
<br>

- np.squeeze(arr): 배열에서 불필요한 차원을 제거합니다.
<br>

```python
# 차원 축소
squeezed_arr = np.squeeze(expanded_arr)
print("차원 축소:\n", squeezed_arr)
```
<br>

## 파일 입출력
<br>

numpy에서 작업을 진행하던 파일을 저장하고 numpy 파일을 불러올 수도 있습니다. 아래 메소드에 대한 설명과 에제를 참고하세요.
<br>

```python
# 배열 저장
#data = np.array([1, 2, 3, 4, 5])
#np.save('data.npy', data)

# 배열 불러오기
loaded_data = np.load('data.npy')
print("불러온 데이터:", loaded_data)
```
<br>

# Pandas
<br>

Pandas는 numpy와 달리 데이터프레임 형태의 분석을 진행할 수 있으며 일반적으로 경제 데이터 분석을 수행하기 위해 정형화된 데이터 전처리 메소드를 제공한다. 아래의 설명과 예제를 따라서 학습해보자.

**프롬프터**

- 자 선생님 지금부터는 경제데이터를 분석하는데 필요한 pandas 라이브러리 지식을 핵심만 알려주세요. 예제가 있어야하고 IDE는 코랩을 씁니다. 또한 메소드별로 코드를 나눠줬으면 하고 설명은 자세하게 해주셨으면 합니다.
- pandas series와 numpy 배열의 차이점은 무엇인가요
- 판다스 데이터 프레임에서 연산을 통해 새로운 열을 추가하려면 어떻게 하나요?
- 선생님 판다스에서 join 작업에 관해서 설명해주시죠 append 도 설명주시면 좋겠습니다
- join과 merge 메소드의 차이는 무엇인가요
<br>

## Pandas 데이터 구조
<br>

- Series : 1차원 배열과 유사하며, 인덱스를 가지는 데이터입니다.
- 레이블이 있는 데이터를 다룰 때 serices가 편하며 대규모 수치 데이터를 다루거나 백터연산이 필요할 때 numpy를 사용한다.
- pd.Series(data): 주어진 데이터를 Series 객체로 변환합니다.
<br>

```python
import pandas as pd

# 리스트로부터 Series 생성
s = pd.Series([1, 3, 5, 7, 9])
print("Series:\n", s)
```
<br>

- DataFrame : 2차원 데이터를 표현하는 행과 열을 가지는 테이블입니다.
- pd.DataFrame(data): 주어진 데이터를 DataFrame 객체로 변환합니다.
<br>

```python
# 딕셔너리로부터 DataFrame 생성
data = {
    'year': [2010, 2011, 2012, 2013],
    'gdp': [1.5, 1.6, 1.7, 1.8]
}
df = pd.DataFrame(data)
print("DataFrame:\n", df)
```
<br>

## Pandas 데이터 파일 입출력
<br>

일반적으로 csv파일을 불러와서 판다스 데이터프레임의 형태로 변환하는 것이 편리하며 반대로 판다스 데이터 프레임을 csv 형태로 출력할 수도 있다.
<br>

```python
# CSV 파일 읽기
df = pd.read_csv('Economic_Data_Sample.csv')
print("CSV 파일로부터 읽은 DataFrame:\n", df)
```
```python
# DataFrame을 CSV 파일로 저장
df.to_csv('output.csv', index=False)
```

**참고자료:코랩에서 저장을 하면 어디로 갈까?**

파일이 현재 작업 디렉토리에 저장됩니다. 이 디렉토리는 Google Colab 세션이 실행되는 가상 머신의 파일 시스템의 일부입니다. 왼쪽 바에 폴더 모양을 클릭하면 디렉토리를 확인할 수 있다.

아래 코드를 통해서 파일 목록을 확인할 수도 있음
<br>

```python
import os
print(os.listdir('.'))
```
<br>

## Pandas 데이터 탐색
<br>

데이터를 불러오고 데이터의 형태나 기본 정보에 대한 탐색을 하는 작업은 필수적이다. 다음은 데이터의 처음 행이나 맨 뒤의 행을 확인하고 데이터의 타입을 확인하는 방법에 대해 알아본다.
<br>

- df.head(): DataFrame의 처음 5행을 반환합니다.
- df.info(): DataFrame의 요약 정보를 출력합니다.
- df.describe(): 수치형 데이터의 통계 요약을 반환합니다.
<br>

```python
# 데이터의 처음 몇 행 보기
print("처음 5행:\n", df.head())

# 데이터의 기본 정보 보기
print("데이터 정보:\n", df.info())

# 데이터 통계 요약 보기
print("통계 요약:\n", df.describe())
```
<br>

## pandas 데이터 선택 및 필터링
<br>

pandas 데이터에서 특정 열을 선택하거나 특정 조건으로 행을 필터링하는 방법에 대해 알아보자.
<br>

- 열 선택: 특정 열을 선택하여 Series 객체로 반환합니다.
- df['column_name']: 지정된 열을 Series로 반환합니다.
<br>

```python
# 특정 열 선택
gdp = df['GDP']
print("GDP 열:\n", gdp)
```
<br>

- 조건으로 필터링: 특정 조건을 만족하는 행을 선택합니다.
- df[condition]: 조건을 만족하는 행을 필터링하여 DataFrame으로 반환합니다.
- 특정 열을 선택하는 것으로 열을 한번 꺼내주고 필터링이 들어가 호출하는 방식
<br>

```python
# 조건으로 필터링
filtered_df = df[df['GDP'] > 5050571]
print("GDP가 1.6 이상인 행:\n", filtered_df)
```
<br>

## pandas 데이터 정렬
<br>

pandas 데이터를 정렬하는 방법은 다음과 같다.
<br>

- 행 정렬: 특정 열을 기준으로 행을 정렬합니다.
- df.sort_values(by='column_name', ascending=True/False): 지정된 열을 기준으로 DataFrame을 정렬합니다.
- 또한 필터링 등 작업을 진행한 dataframe을 새로운 형태로 저장하고 print를 통해 출력해야함
<br>

```python
# 특정 열을 기준으로 정렬
sorted_df = df.sort_values(by='GDP', ascending=False)
print("GDP 기준 내림차순 정렬:\n", sorted_df)
```
<br>

## pandas 데이터 통계
<br>

pandas 데이터를 그룹화 이후 summary하는 방법은 다음과 같다.
<br>

- 데이터 그룹화 및 집계: 특정 열을 기준으로 데이터를 그룹화하고, 집계함수를 적용합니다.
- df.groupby('column_name').aggfunc(): 지정된 열을 기준으로 데이터를 그룹화하고, 집계함수를 적용합니다.
<br>

```python
# 연도별 GDP 합계 계산
grouped = df.groupby('Year').sum()
print("연도별 GDP 합계:\n", grouped)
```
<br>

## pandas 데이터 결측치 처리
<br>

pandas 데이터에서 필요없는 값(결측치)을 확인하고 결측치 처리하는 방법은 다음과 같다.
<br>

- 결측치 확인 및 제거: 결측치를 확인하고 제거합니다.
- df.isnull(): DataFrame에서 결측치를 확인합니다.
- df.dropna(): 결측치가 있는 행을 제거합니다.
- dropna는 결측치가 하나라도 존재하는 행을 전체 삭제하는 것이기 때문에 조건을 통해서 결측치를 대체하는 것이 데이터 보존에 도움이 된다.
<br>

```python
# 결측치 확인
print("결측치 개수:\n", df.isnull().sum())

# 결측치 제거
df_cleaned = df.dropna()
print("결측치 제거 후 데이터:\n", df_cleaned)
```
<br>

## panads 데이터 추가 및 삭제
<br>

pandas에서 열을 생성하고 데이터를 추가하는 방법과 열을 삭제하는 방법은 다음과 같다.
<br>

- 행과 열 추가 및 삭제: 새로운 열을 추가하거나 기존의 행과 열을 삭제합니다.
- df['new_column'] = data: 새로운 열을 추가합니다.
- df.drop(columns=['column_name']): 특정 열을 삭제합니다.
- 성장률 메소드를 통하여 호출하고 계산된 열을 바로 데이터프레임에 추가할 수 있다.
<br>

```python
# 새로운 열 추가
df['growth_rate'] = df['GDP'].pct_change()
print("성장률 추가:\n", df)

# 특정 열 삭제
df_dropped = df.drop(columns=['growth_rate'])
print("성장률 열 삭제:\n", df_dropped)
```
<br>


- 두 열의 합을 새로운 열로 추가 : df['new_column'] = df['column1'] + df['column2']
- 새로운 열을 만드는 작업이 직관적
<br>


```python
import pandas as pd

# 샘플 데이터 생성
data = {
    'A': [1, 2, 3],
    'B': [4, 5, 6]
}
df = pd.DataFrame(data)
print("원본 DataFrame:\n", df)

# 두 열의 합을 새로운 열 'C'로 추가
df['C'] = df['A'] + df['B']
print("새로운 열 'C' 추가 후 DataFrame:\n", df)
```
<br>


- 열에 함수 적용하여 새로운 열로 추가 : df['new_column'] = df['column'].apply(function)
- lambda는 익명의 함수, apply는 함수를 한번씩 호출하는 메소드
- 필요한 함수를 정의하고 실행시킴
<br>


```python
# 함수 적용: 열 'A'의 제곱을 새로운 열 'E'로 추가
df['E'] = df['A'].apply(lambda x: x**2)
print("새로운 열 'E' 추가 후 DataFrame:\n", df)
```
<br>


- 조건에 따른 새로운 열 추가: df['new_column'] = np.where(condition, value1, value2)
<br>


```python
# 조건에 따른 값 추가: 열 'A'의 값이 2보다 큰 경우 True, 그렇지 않은 경우 False를 새로운 열 'F'로 추가
df['F'] = df['A'] > 2
print("새로운 열 'F' 추가 후 DataFrame:\n", df)
```
```python
import pandas as pd
import numpy as np

# 샘플 데이터 생성
data = {
    'A': [1, 2, 3, 4, 5],
    'B': [5, 4, 3, 2, 1]
}
df = pd.DataFrame(data)
print("원본 DataFrame:\n", df)

# np.where를 사용하여 조건에 따른 값 추가
df['C'] = np.where(df['A'] > 3, 'High', 'Low')
print("새로운 열 'C' 추가 후 DataFrame:\n", df)
```
<br>

## pandas 데이터 병합
<br>
pandas 데이터를 병합하는 방법은 join, merge 메소드를 활용하여 진행한다.
<br>

- join 메서드: 데이터프레임의 인덱스를 기준으로 병합합니다. 이 메서드는 주로 DataFrame의 set_index() 메서드와 함께 사용되어 인덱스가 설정된 두 데이터프레임을 병합할 때 유용합니다.

- merge 메서드: SQL의 JOIN과 유사하게 두 데이터프레임을 특정 열을 기준으로 병합할 때 사용됩니다. how 매개변수를 통해 병합 유형을 지정할 수 있습니다.
<br>

merge, join 메서드의 옵션은 다음과 같다.
<br>

- inner (기본값): 양쪽 데이터프레임에 모두 존재하는 키만 포함합니다.
- outer: 양쪽 데이터프레임에 존재하는 모든 키를 포함합니다.
- left: 왼쪽 데이터프레임의 모든 키를 포함하고 오른쪽 데이터프레임의 일치하는 키를 포함합니다.
- right: 오른쪽 데이터프레임의 모든 키를 포함하고 왼쪽 데이터프레임의 일치하는 키를 포함합니다.
<br>

```python
import pandas as pd

# 데이터프레임 생성
df1 = pd.DataFrame({
    'key': ['A', 'B', 'C'],
    'value1': [1, 2, 3]
})

df2 = pd.DataFrame({
    'key': ['B', 'C', 'D'],
    'value2': [4, 5, 6]
})

# inner join (기본값)
result = pd.merge(df1, df2, on='key', how='inner')
print(result)
```

```python
# 데이터프레임 생성
df1 = pd.DataFrame({
    'value1': [1, 2, 3]
}, index=['A', 'B', 'C'])

df2 = pd.DataFrame({
    'value2': [4, 5, 6]
}, index=['B', 'C', 'D'])

# 인덱스를 기준으로 join
result = df1.join(df2, how='inner')
print(result)
```